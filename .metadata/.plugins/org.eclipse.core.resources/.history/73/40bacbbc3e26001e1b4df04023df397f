package PolyHealthCenter.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import PolyHealthCenter.repository.PrenotazioneDAORepository;
import PolyHealthCenter.repository.SedeDAORepository;
import PolyHealthCenter.repository.TerapiaDAORepository;
import PolyHealthCenter.repository.UtenteDAORepository;
import PolyHealthCenter.security.exception.MyAPIException;
import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;
import PolyHealthCenter.model.Prenotazione;
import PolyHealthCenter.model.PrenotazioneDTO;
import PolyHealthCenter.model.Terapia;
import PolyHealthCenter.model.Utente;
import PolyHealthCenter.exception.PrenotazioneException;

@Service
public class PrenotazioneService {
	@Autowired PrenotazioneDAORepository repo;
	@Autowired UtenteDAORepository repoUtente;
	@Autowired SedeDAORepository repoSede;
	@Autowired TerapiaDAORepository repoTerapia;
	
	
	
	public Prenotazione getPrenotazioneRandom() {
		return repo.findByPrenotazioneRandom();
	}
	//JPA METHODS

//getByID
public Prenotazione getById(Long id) {
	if (!repo.existsById(id)) {
		throw new EntityNotFoundException("Prenotazione non esiste!");
	}
	return repo.findById(id).get();
}


//getAll
public List<Prenotazione> getAll() {
	return repo.findAll();
}

//create
//public Prenotazione createPrenotazione(Prenotazione postazione) {
//	return repo.save(postazione);
//}

//update
public Prenotazione updatePrenotazione( Prenotazione prenotazione, Long id) {
	Optional<Prenotazione> prenotazioneResult = repo.findById(id);

	if (prenotazioneResult.isPresent()) {
		Prenotazione prenotazioneUpdate = prenotazioneResult.get();
		prenotazioneUpdate.setDataPrenotazione(prenotazione.getDataPrenotazione());
		prenotazioneUpdate.setTerapia(prenotazione.getTerapia());
		prenotazioneUpdate.setUtente(prenotazione.getUtente());
		prenotazioneUpdate.setSede(prenotazione.getSede());
		repo.save(prenotazioneUpdate);
		return prenotazioneUpdate;
	} else {
		throw new PrenotazioneException("Prenotazione non aggiornata");
	}

}

//delete

public String deletePrenotazione(Long id) {
	if(!repo.existsById(id)) {
		throw new EntityExistsException("La Prenotazione con id " + id + " non è presente del database!");
	}
	repo.deleteById(id);
	return "Prenotazione cancellata!!!";
}

public Fattura createFattura(FatturaDTO DTO) {
	if (repo.existsByNumeroFattura(DTO.getNumeroFattura())) {
		throw new EntityExistsException("La fattura n. " + DTO.getNumeroFattura() + " è già stata creata");
	}
	if (!repoCliente.existsById(DTO.getIdCliente())) {
		throw new MyAPIException(HttpStatus.NOT_FOUND, "Cliente[" + DTO.getIdCliente() + "] non esiste");
	}
	Fattura fattura = new Fattura();
	fattura.setAnno(DTO.getAnno());
	fattura.setCliente(repoCliente.findById(DTO.getIdCliente()).get());
	fattura.setDataFattura(DTO.getDataFattura());
	fattura.setImporto(DTO.getImporto());
	fattura.setNumeroFattura(DTO.getNumeroFattura());
	fattura.setStatoFattura(DTO.getStatoFattura());
	
	System.out.println(fattura);
	repo.save(fattura);
	return fattura;
}

public Prenotazione salvaPrenotazione(PrenotazioneDTO DTO) {
	if(repo.existsById(DTO.getId())) {
		throw new EntityExistsException("Prenotazione con id " + DTO.getId() + " è già stata creata");
	}
	if(!repoUtente.existsByEmail(DTO.getEmailUtente())) {
		throw new MyAPIException(HttpStatus.NOT_FOUND, "Utente[" + DTO.getEmailUtente() + "] non esiste");
	}
	if(!repoTerapia.existsByNome(DTO.getNomeTerapia())) {
		throw new MyAPIException(HttpStatus.NOT_FOUND, "Terapia[" + DTO.getNomeTerapia() + "] non esiste");
	}
	if(!repoSede.existsByComune(DTO.getComuneSede())) {
		throw new MyAPIException(HttpStatus.NOT_FOUND, "Sede[" + DTO.getComuneSede() + "] non esiste");
	}
	Prenotazione prenotazione =new Prenotazione();
	//fattura.setCliente(repoCliente.findById(DTO.getEmailCliente()).get());
	prenotazione.setDataPrenotazione(DTO.getDataPrenotazione());
	prenotazione.setSede(repoSede.findByComune(DTO.getComuneSede()));
	prenotazione.setTerapia(repoTerapia.findByNome(DTO.getNomeTerapia()));
	prenotazione.setUtente(repoUtente.findByEmail(DTO.getEmailUtente()));
	prenotazione.setDataPrenotazione(DTO.getDataPrenotazione());
	
}

//create
public Prenotazione salvaPrenotazion(Prenotazione p) {
	List<Prenotazione> listaperUtente =  getByUtenteAndDataPrenotazione(p.getUtente(), p.getDataPrenotazione());
	List<Prenotazione> listperTerapia = getByTerapiaAndDataPrenotazione(p.getTerapia(), p.getDataPrenotazione());
	if (listaperUtente.size() > 0) {
	 System.out.println("ATTENZIONE. ESISTE GIA UNA PRENOTAZIONE PER LA DATA RICHIESTA");
	} else if (listperTerapia.size() > 0 ) {
		 System.out.println("ATTENZIONE. LA TERAPIA E' GIA OCCUPATA NELLA DATA RICHIESTA");			
	} else {
		System.out.println("Prenotazione aggiunta al DB!!!");
	repo.save(p);
	}
	return p;
	repo.save(p);
	return p;
}



// CUSTOM METHODS
public List<Prenotazione> getByUtente(Utente u) {
	return (List<Prenotazione>) repo.findByUtente(u);	
}

public List<Prenotazione> getByUtenteAndDataPrenotazione(Utente u, LocalDate data) {
	return (List<Prenotazione>) repo.findByUtenteAndDataPrenotazione(u, data);	
}
public List<Prenotazione> getByTerapiaAndDataPrenotazione(Terapia t, LocalDate data) {
	return (List<Prenotazione>) repo.findByTerapiaAndDataPrenotazione(t, data);	
}


}
