package PolyHealthCenter.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import PolyHealthCenter.repository.PrenotazioneDAORepository;
import PolyHealthCenter.model.Prenotazione;
import PolyHealthCenter.model.Utente;
import PolyHealthCenter.exception.PrenotazioneException;

@Service
public class PrenotazioneService {
	@Autowired PrenotazioneDAORepository repo;
	

	//JPA METHODS

//getByID
public Optional<Prenotazione> getById(Long id) {
	return repo.findById(id);
}

//getAll
public List<Prenotazione> getAll() {
	return repo.findAll();
}

//create
public Prenotazione createPrenotazione(Prenotazione postazione) {
	return repo.save(postazione);
}

//update
public Prenotazione updatePrenotazione(Long id, Prenotazione prenotazione) {
	Optional<Prenotazione> prenotazioneResult = repo.findById(id);

	if (prenotazioneResult.isPresent()) {
		Prenotazione prenotazioneUpdate = prenotazioneResult.get();
		prenotazioneUpdate.setDataPrenotazione(prenotazione.getDataPrenotazione());
		prenotazioneUpdate.setTerapia(prenotazione.getTerapia());
		prenotazioneUpdate.setUtente(prenotazione.getUtente());
		repo.save(prenotazioneUpdate);
		return prenotazioneUpdate;
	} else {
		throw new PrenotazioneException("Prenotazione non aggiornata");
	}

}

//delete
public void deletePrenotazione(Long id) {
	repo.deleteById(id);
}

//CUSTOM METHODS


//public Prenotazione prenota(Utente utente, Postazione postazione, LocalDate dataPrenotazione) {
//	if (checkDataPrenotazione(dataPrenotazione) == false) {
//		throw new PrenotazioneException(
//				"Impossibile prenotare una postazione meno di " + giorniAnticipoPrenotazione + " giorni prima");
//	}
//
//	if (!checkPrenotazioniUtentePerData(utente, dataPrenotazione)) {
//		throw new PrenotazioneException("Impossibile effettuare due prenotazioni per la stessa data");
//	}
//
//	Prenotazione prenotazione = new Prenotazione(null,utente, postazione, dataPrenotazione, LocalDate.now());
//
//	return prenotazioneRepository.save(prenotazione);
//
//}
//
//private boolean checkDataPrenotazione(LocalDate dataPrenotazione) {
//	LocalDate now = LocalDate.now();
//	return dataPrenotazione.minus(giorniAnticipoPrenotazione, ChronoUnit.DAYS).isAfter(now);
//}
//
//private boolean checkPrenotazioniUtentePerData(User user, LocalDate dataPrenotazione) {
//
//	Pageable pageable = PageRequest.of(0, 1);
//
//	Page<Prenotazione> findByUserDataPrenotata = prenotazioneRepository.findByUserAndDataPrenotata(user,
//			dataPrenotazione, pageable);
//
//	return findByUserDataPrenotata.isEmpty();
//
//}
}
